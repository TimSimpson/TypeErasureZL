~import std::string;
~import std::unique_ptr;

class Feather
{
    ~import Feather::handle_base;

public:
    unique_ptr<handle_base> value;

    Feather() = default;

    Feather(const Feather & rhs)
    :   value(rhs.value->clone())
    {
    }

    template <typename T> Feather(T t)
    :   value(new handle<typename std::remove_reference<T>::type>(
            std::forward<T>(t)
        ))
    {
    }

    Feather & operator =(const Feather & rhs)
    {
        if (this == &rhs)
        {
            return *this;
        }
        decltype(value) temp(rhs.value->clone());
        std::swap(temp, this->value);
        return *this;
    }

    template <typename T> Feather & operator =(T t)
    {
        decltype(value) temp(
            new handle<typename std::remove_reference<T>::type>(
                std::forward<T>(t)
            )
        );
        std::swap(temp, this->value);
        return *this;
    }

    std::string quack() const
    {
        if (value) {
            return value->quack();
        } else {
            return "<null>";
        }
    }

    public class handle_base
    {
        public virtual ~handle_base() {}
        public virtual handle_base * clone() const = 0;
        public virtual std::string quack() const = 0;
    };

    template<typename T>
    class handle : public handle_base
    {
    public:
        handle(T value)
        :   value_(std::move(value))
        {
        }

        virtual handle_base * clone() const
        {
            return new handle(value_);
        }

        virtual std::string quack() const
        {
            return value_->.quack();
        }

        T value_;
    };

};
