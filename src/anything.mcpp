~import std::unique_ptr;

class anything
{
    ~import anything::handle_base;

    public unique_ptr<handle_base> handle_;

    public anything() = default;

    public anything(const anything & rhs)
    :   handle_(rhs.handle_->clone())
    {
    }

    template<typename T>
    public anything(T t)
    :   handle_(new handle<typename std::remove_reference<T>::type>(
            std::forward<T>(t)
        ))
    {

    }

    public anything & operator =(const anything & rhs)
    {
        if (this == &rhs)
        {
            return *this;
        }
        decltype(handle_) temp(rhs.handle_->clone());
        std::swap(temp, this->handle_);
        return *this;
    }

    template <typename T>
    public anything & operator =(T t)
    {
        decltype(handle_) temp(
            new handle<typename std::remove_reference<T>::type>(
                std::forward<T>(t)
            )
        );
        std::swap(temp, this->handle_);
        return *this;
    }


    public class handle_base
    {
        public virtual ~handle_base() {}
        public virtual handle_base * clone() const = 0;
    };

    template<typename T>
    class Fake : public handle_base
    {
        public Fake(T value)
        {}
    };

    template<typename T>
    public class handle : public handle_base
    {
        private T value_;

        public handle(T value)
        :   value_(std::move(value))
        {
        }

        public virtual ~handle() = default;

        public virtual handle_base * clone() const override
        {
            return new handle(value_);
        }
    };
};
